name: CI

on:
  push:
    branches:
    - main
    - 'v*'
    tags:
    - 'v*'
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # Github Actions supports ubuntu, windows, and macos virtual environments:
  # https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners
  ci_tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allow_failure || contains(github.event.pull_request.labels.*.name, 'continue-on-error') }}
    strategy:
      matrix:
        include:
          - name: Code style checks
            os: ubuntu-latest
            python: 3.x
            toxenv: codestyle
            allow_failure: false

          - name: PEP 517
            os: ubuntu-latest
            python: 3.x
            toxenv: pep517
            allow_failure: false

          - name: Security audit
            os: ubuntu-latest
            python: 3.x
            toxenv: securityaudit
            allow_failure: false

          - name: Python 3.11 with coverage checking, all deps, and remote data
            os: ubuntu-latest
            python: '3.11'
            toxenv: py311-test-alldeps-cov
            toxposargs: --remote-data --run-slow
            allow_failure: false

          - name: OS X - Python 3.12
            os: macos-latest
            python: '3.12'
            toxenv: py312-test
            allow_failure: false

          - name: Windows - Python 3.12
            os: windows-latest
            python: '3.12'
            toxenv: py312-test
            allow_failure: false

          - name: Linux - Python 3.13
            os: ubuntu-latest
            python: '3.13'
            toxenv: py313-test
            allow_failure: false

          # This also runs on cron but we want to make sure new changes
          # won't break this job at the PR stage.
          - name: Python 3.13 with latest dev versions of key dependencies, and remote data
            os: ubuntu-latest
            python: '3.13'
            toxenv: py313-test-devdeps
            toxposargs: --remote-data --run-slow
            allow_failure: true

          - name: Python 3.11 with stable versions of dependencies and Roman
            os: ubuntu-latest
            python: '3.11'
            toxenv: py311-test-romandeps
            allow_failure: true

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
      with:
        fetch-depth: 0
    - name: Set up python ${{ matrix.python }} on ${{ matrix.os }}
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5.6.0
      with:
        python-version: ${{ matrix.python }}
    - name: Install base dependencies
      run: python -m pip install --upgrade pip tox
    - name: Install extra dependencies for strauss
      if: "contains(matrix.toxenv, 'alldeps')"
      run: sudo apt-get install libportaudio2
    - name: Get IP address for MAST debugging
      if: "contains(matrix.toxposargs, '--remote-data')"
      run: curl https://api.ipify.org
    - name: Get components for cache key
      id: date
      if: "contains(matrix.toxposargs, '--remote-data')"
      run: |
        echo "year=$(date +'%Y')" >> $GITHUB_OUTPUT
        echo "week=$(date +'%V')" >> $GITHUB_OUTPUT
        echo "day=$(date +'%j')" >> $GITHUB_OUTPUT
    - name: Restore MAST cache
      if: "contains(matrix.toxposargs, '--remote-data')"
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: ./
        key: use-restore-keys-below-to-match-in-priority-order
        restore-keys: |
          mast-cache-${{ steps.date.outputs.year }}-${{ steps.date.outputs.week }}-${{ steps.date.outputs.day }}-
          mast-cache-${{ steps.date.outputs.year }}-${{ steps.date.outputs.week }}-
          mast-cache-${{ steps.date.outputs.year }}-
          mast-cache-
    - name: Move cache to tox working directory
      if: "contains(matrix.toxposargs, '--remote-data')"
      run: |
        # Create cache directories for all possible tox environments
        # tox runs from .tmp/{envname}, so we need to place cache files there
        mkdir -p ".tmp/${{ matrix.toxenv }}"

        # Check if any fits files exist and move them to the tox working directory
        if ls ./*.fits 1> /dev/null 2>&1; then
          mv ./*.fits ".tmp/${{ matrix.toxenv }}/"
          echo "Cache files moved to .tmp/${{ matrix.toxenv }}/"
          echo "Files in tox working directory:"
          ls -la ".tmp/${{ matrix.toxenv }}/"*.fits
        else
          echo "No .fits files found in cache - tests will download files as needed"
        fi
    - name: Test/run with tox
      run: tox -e ${{ matrix.toxenv }} -- ${{ matrix.toxposargs }}
    - name: Upload coverage to artifacts
      if: "contains(matrix.toxenv, '-cov')"
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
      with:
        name: coverage_${{ matrix.toxenv }}.xml
        path: coverage.xml
        if-no-files-found: error

  upload-codecov:
    needs: [ ci_tests ]
    permissions:
      contents: none
    runs-on: ubuntu-latest
    name: Upload Coverage
    steps:
    # work around CodeCov upload issue
    # see: https://github.com/codecov/codecov-action/issues/1801
    - uses: actions/checkout@v4
    - name: Download coverage artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093  # v4.3.0
      with:
        path: coverage
        pattern: coverage_*
        merge-multiple: true
    - name: Upload report to Codecov
      if: ${{ hashFiles('coverage/') != '' }}
      uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24  # v5.4.3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: coverage
        fail_ci_if_error: true
        verbose: true
