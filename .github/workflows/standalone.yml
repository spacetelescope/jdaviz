name: Build standalone

on:
  push:
    branches:
    - main
    - 'v*'
    - 'pyinstaller_v2'
    tags:
    - 'v*'
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-standalone
  cancel-in-progress: true

defaults:
  run:
    shell: bash {0}


jobs:
  build_binary:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
    steps:
    # osx signing based on https://melatonin.dev/blog/how-to-code-sign-and-notarize-macos-audio-plugins-in-ci/
    - name: Import Certificates (macOS)
      uses: apple-actions/import-codesign-certs@v1
      if: ${{ matrix.os == 'macos' }}
      with:
        p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
        p12-password: ${{ secrets.DEV_ID_APP_PASSWORD }}
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install jdaviz
      run: pip install .

    - name: Install pyinstaller
      run: pip install pyinstaller==5.11

    - name: Create standalone binary
      env:
        DEVELOPER_ID_APPLICATION: ${{ secrets.DEVELOPER_ID_APPLICATION }}
      run: (cd standalone; pyinstaller ./jdaviz.spec)

    - name: Remove invalid files for OSX
      # hopefully we can improve this in the future
      # by using good hooks
      if: ${{ matrix.os == 'macos' }}
      run: |
        rm -rf dist/jdaviz.app/Contents/Resources/skimage/.dylibs

    - name: Codesign (OSX)
      if: ${{ matrix.os == 'macos' }}
      run: |
        cd standalone/dist
        codesign --deep --force --options=runtime --entitlements entitlements.plist --sign ${{ secrets.DEVELOPER_ID_APPLICATION }} --timestamp jdaviz.app

    - name: Notary step (OSX)
      if: ${{ matrix.os == 'macos' }}
      run: |
        xcrun notarytool submit standalone/dist/jdaviz.zip --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --team-id ${{ secrets.TEAM_ID }} --wait --password ${{ secrets.NOTARIZATION_PASSWORD }}

    - name: Run jdaviz cmd in background
      run: ./standalone/dist/jdaviz-cli/jdaviz-cli imviz&

    - name: Install playwright
      run: (pip install playwright; playwright install chromium)

    - name: Install pytest
      run: pip install pytest-playwright

    - name: Wait for Voila to get online
      uses: ifaxity/wait-on-action@v1
      with:
        resource: tcp:8866
        timeout: 60000

    - name: Test standalone
      run: (cd standalone; touch pytest.ini; JUPYTER_PLATFORM_DIRS=1 pytest test.py --video=on)

    - name: Upload Test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}
        path: standalone/test-results

    - name: Zip OSX app to maintain symlinks
      # if we do not call always() GHA will && with success()
      if: ${{ always() && (matrix.os == 'macos') }}
      run: (cd standalone/dist; zip -r --symlinks jdaviz.zip jdaviz.app )

    - name: Upload jdaviz standalone
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: jdaviz-standlone-${{ matrix.os }}
        path: |
          standalone/dist/jdaviz-cli
          standalone/dist/jdaviz.zip
