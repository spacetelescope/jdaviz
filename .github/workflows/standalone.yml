name: Build standalone

on:
  push:
    branches:
    - main
    - 'v*'
    tags:
    - 'v*'
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled]

defaults:
  run:
    shell: bash {0}

jobs:
  build_binary_not_osx:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55  # v5.5.0
      with:
        python-version: "3.11"

    - uses: ConorMacBride/install-package@v1
      with:
          # mirrored from glue-qt
          #  https://github.com/glue-viz/glue-qt/blob/main/.github/workflows/ci_workflows.yml
          #  using
          #   https://github.com/OpenAstronomy/github-actions-workflows/blob/5edb24fa432c75c0ca723ddea8ea14b72582919d/.github/workflows/tox.yml#L175C15-L175C49
          # Linux PyQt 5.15 and 6.x installations require apt-getting xcb and EGL deps
          # and headless X11 display;
          apt: '^libxcb.*-dev libxkbcommon-x11-dev libegl1-mesa libopenblas-dev libhdf5-dev'

    - name: Setup headless display
      uses: pyvista/setup-headless-display-action@v3

    - name: Install jdaviz
      run: pip install .[test,qt]

    - name: Install pyinstaller
      # see https://github.com/erocarrera/pefile/issues/420 for performance issues on
      # windows for pefile == 2024.8.26
      # also see https://github.com/widgetti/solara/pull/724
      # or https://solara.dev/documentation/advanced/howto/standalone (currently unpublished)
      run: pip install "pyinstaller" "pefile<2024.8.26"

    - name: Create standalone binary
      env:
        DEVELOPER_ID_APPLICATION: ${{ vars.DEVELOPER_ID_APPLICATION }}
      run: (cd standalone; pyinstaller ./jdaviz.spec)

    - name: Run jdaviz cmd in background
      run: ./standalone/dist/jdaviz/jdaviz-cli imviz --port 8765 &

    - name: Install playwright
      run: (pip install playwright; playwright install chromium)

    - name: Install pytest
      run: pip install pytest-playwright

    - name: Wait for Solara to get online
      uses: ifaxity/wait-on-action@a7d13170ec542bdca4ef8ac4b15e9c6aa00a6866  # v1.2.1
      with:
        resource: tcp:8765
        timeout: 60000

    - name: Test standalone
      run: (cd standalone; touch pytest.ini; JUPYTER_PLATFORM_DIRS=1 pytest test_standalone.py --video=on)

    - name: Upload Test artifacts
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
      with:
        name: test-results-${{ matrix.os }}
        path: standalone/test-results

    - name: Upload jdaviz standalone (non-OSX)
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
      with:
        name: jdaviz-standlone-${{ matrix.os }}
        path: |
          standalone/dist/jdaviz

  # Build for OSX, but not sign
  build_binary_osx:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-14]
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55  # v5.5.0
      with:
        python-version: "3.11"

    - name: Install jdaviz
      run: pip install .[test,qt]

    - name: Install pyinstaller
      run: pip install "pyinstaller"

    - name: Create standalone binary
      env:
        DEVELOPER_ID_APPLICATION: ${{ vars.DEVELOPER_ID_APPLICATION }}
      run: (cd standalone; pyinstaller ./jdaviz.spec)

    - name: Run jdaviz cmd in background
      run: ./standalone/dist/jdaviz.app/Contents/MacOS/jdaviz-cli imviz --port=8765 &

    - name: Install playwright
      run: (pip install playwright; playwright install chromium)

    - name: Install pytest
      run: pip install pytest-playwright

    - name: Wait for Solara to get online
      uses: ifaxity/wait-on-action@a7d13170ec542bdca4ef8ac4b15e9c6aa00a6866  # v1.2.1
      with:
        resource: tcp:8765
        timeout: 60000

    - name: Test standalone
      run: (cd standalone; touch pytest.ini; JUPYTER_PLATFORM_DIRS=1 pytest test_standalone.py --video=on)

    - name: Upload Test artifacts
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
      with:
        name: test-results-${{ matrix.os }}
        path: standalone/test-results

    - name: Upload unsigned binary
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
      with:
        name: jdaviz-unsigned-${{ matrix.os }}
        path: standalone/dist/jdaviz.app

  # Signing job that only runs when we have the certificate
  sign_binary_osx:
    needs: build_binary_osx
    runs-on: ${{ matrix.os }}
    if: (github.repository == 'spacetelescope/jdaviz' && github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')))
    strategy:
      matrix:
        os: [macos-14]
    steps:
    - name: Download unsigned binary
      uses: actions/download-artifact@v4
      with:
        name: jdaviz-unsigned-${{ matrix.os }}
        path: standalone/dist

    - name: Import Certificates (macOS)
      uses: apple-actions/import-codesign-certs@cfd6eb39a2c848ead8836bda6b56813585404ba7  # v5.0.0
      with:
        p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
        p12-password: ${{ secrets.DEV_ID_APP_PASSWORD }}

    - name: Codesign app (OSX)
      env:
        DEVELOPER_ID_APPLICATION: ${{ vars.DEVELOPER_ID_APPLICATION }}
      run: |
        cd standalone/dist
        codesign --deep --force --options=runtime --entitlements ../entitlements.plist --sign ${{ vars.DEVELOPER_ID_APPLICATION }} --timestamp jdaviz.app

    - name: Validate signed app (OSX)
      run: |
        spctl -a -vvv -t execute standalone/dist/jdaviz.app

    - name: Create dmg (OSX)
      run: |
        rm -rf standalone/dist/jdaviz
        hdiutil create -volname "Jdaviz" -srcfolder standalone/dist -ov -format UDZO standalone/dist/jdaviz.dmg

    - name: Notary step + stapling (OSX)
      run: |
        output=$(xcrun notarytool submit standalone/dist/jdaviz.dmg --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --team-id ${{ secrets.TEAM_ID }} --wait --password ${{ secrets.NOTARIZATION_PASSWORD }}) || true
        echo "$output"
        uuid=$(echo "$output" | awk -F '[ :]+' '/id:/ {print $3; exit}')
        echo "UUID: $uuid"
        if [[ $output == *"status: Accepted"* ]]; then
          echo "Great, notarization succeeded, staple it!"
          xcrun stapler staple standalone/dist/jdaviz.dmg
        else
          echo "Log output for failed notarization: $uuid"
          xcrun notarytool log --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --team-id ${{ secrets.TEAM_ID }} --password ${{ secrets.NOTARIZATION_PASSWORD }} $uuid || true
        fi

    - name: Upload signed binary
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
      with:
        name: jdaviz-standlone-${{ matrix.os }}
        path: standalone/dist/jdaviz.dmg
